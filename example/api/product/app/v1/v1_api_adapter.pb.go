// Code generated by github.com/panjiang/protoc-gen-go-oneof-api-adapter. DO NOT EDIT.

package v1

import (
	context "context"
	errors "errors"
)

// This is a compile-time assertion to import dependent packages.
// context.
// errors.

var (
	ErrApiUnknownRequest = errors.New("unknown request")
)

type ApiHandler interface {
	LoginWithOpenid(context.Context, *LoginWithOpenIDRequest) (*LoginWithOpenIDResponse, error)
	LoginWithAccount(context.Context, *LoginWithAccountRequest) (*LoginWithAccountResponse, error)
}

type ApiAdapter interface {
	Dispatch(context.Context, *Request) (*Response, error)
}

func NewApiAdapter(handler ApiHandler) ApiAdapter {
	return &apiAdapter{
		handler: handler,
	}
}

type apiAdapter struct {
	handler ApiHandler
}

func (a *apiAdapter) Dispatch(ctx context.Context, request *Request) (*Response, error) {
	response := new(Response)
	switch req := request.Body.(type) {
	case *Request_LoginWithOpenid:
		resp, err := a.handler.LoginWithOpenid(ctx, req.LoginWithOpenid)
		if err != nil {
			return nil, err
		}
		response.Body = &Response_LoginWithOpenid{
			LoginWithOpenid: resp,
		}
	case *Request_LoginWithAccount:
		resp, err := a.handler.LoginWithAccount(ctx, req.LoginWithAccount)
		if err != nil {
			return nil, err
		}
		response.Body = &Response_LoginWithAccount{
			LoginWithAccount: resp,
		}
	default:
		return nil, ErrApiUnknownRequest
	}
	return response, nil
}
